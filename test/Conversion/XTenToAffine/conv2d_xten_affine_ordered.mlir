// (c) Copyright 2019 Xilinx Inc. All Rights Reserved.

// RUN: aten-opt %s -xten-to-affine='xten-loop-order=3,0,1,2,4' -cse | FileCheck %s --check-prefix=ATEN
// ATEN:       module {
// ATEN-LABEL:   {affine_opt_label = "xten.conv2d_op_bias"}
// ATEN-NEXT:      affine.for %[[VAL_1:.*]] = 0 to 208 {
// ATEN-NEXT:        affine.for %[[VAL_2:.*]] = 0 to 1 {
// ATEN-NEXT:          affine.for %[[VAL_3:.*]] = 0 to 6 {
// ATEN-NEXT:            affine.for %[[VAL_4:.*]] = 0 to 4 {
// ATEN-NEXT:              affine.for %[[VAL_5:.*]] = 0 to 416 {
// ATEN-NEXT:                affine.for %[[VAL_6:.*]] = 0 to 3 {
// ATEN-NEXT:                  affine.for %[[VAL_7:.*]] = 0 to 3 {
// ATEN:                       }
// ATEN:                     }
// ATEN:                   }
// ATEN:                 }
// ATEN:               }
// ATEN:             }
// ATEN:           } {affine_opt_label = "xten.conv2d_op"}


module  {
  func @graph(%arg0: tensor<1x4x208x416xf32>) -> tensor<1x6x208x416xf32> {
    %cst = constant dense<"0xtensor<6x4x3x3xf32>
    %cst_0 = constant dense<[-0.130367517, -0.0873552412, 0.134582132, -0.135257781, -0.011967699, 0.164873123]> : tensor<6xf32>
    %bool_false = basicpy.bool_constant false
    %c0_i64 = constant 0 : i64
    %c1_i64 = constant 1 : i64
    %0 = basicpy.build_list %c1_i64, %c1_i64 : (i64, i64) -> !basicpy.ListType
    %1 = basicpy.build_list %c1_i64, %c1_i64 : (i64, i64) -> !basicpy.ListType
    %2 = basicpy.build_list %c1_i64, %c1_i64 : (i64, i64) -> !basicpy.ListType
    %3 = basicpy.build_list %c0_i64, %c0_i64 : (i64, i64) -> !basicpy.ListType
    %4 = "xten.conv2d"(%arg0, %cst, %cst_0, %0, %1, %2, %bool_false, %3, %c1_i64) : (tensor<1x4x208x416xf32>, tensor<6x4x3x3xf32>, tensor<6xf32>, !basicpy.ListType, !basicpy.ListType, !basicpy.ListType, !basicpy.BoolType, !basicpy.ListType, i64) -> tensor<1x6x208x416xf32>
    return %4 : tensor<1x6x208x416xf32>
  }
}

